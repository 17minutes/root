--- lib/ExecutionEngine/RuntimeDyld/RuntimeDyld.cpp
+++ lib/ExecutionEngine/RuntimeDyld/RuntimeDyld.cpp
@@ -160,19 +160,30 @@
   // Common symbols requiring allocation, with their sizes and alignments
   CommonSymbolList CommonSymbols;
 
+  // Weak symbols.
+  WeakSymbolList WeakSymbols;
+
   // Parse symbols
   DEBUG(dbgs() << "Parse symbols:\n");
   for (symbol_iterator I = Obj.symbol_begin(), E = Obj.symbol_end(); I != E;
        ++I) {
     uint32_t Flags = I->getFlags();
 
+    ErrorOr<object::SymbolRef::Type> SymTypeOrErr = I->getType();
+    Check(SymTypeOrErr.getError());
+    object::SymbolRef::Type SymType = *SymTypeOrErr;
+
     if (Flags & SymbolRef::SF_Common)
       CommonSymbols.push_back(*I);
-    else {
-      ErrorOr<object::SymbolRef::Type> SymTypeOrErr = I->getType();
-      Check(SymTypeOrErr.getError());
-      object::SymbolRef::Type SymType = *SymTypeOrErr;
-
+    else if (Flags & SymbolRef::SF_Weak) {
+      // We re-emit functions; processRelocationRef() is not required to
+      // support ST_Function.
+      ErrorOr<section_iterator> SIOrErr = I->getSection();
+      Check(SIOrErr.getError());
+      section_iterator SI = *SIOrErr;
+      assert(SI != Obj.section_end() && "Weak symbol doesn't have section?");
+      WeakSymbols.push_back(std::make_pair(I, SI));
+    } else {
       // Get symbol name.
       ErrorOr<StringRef> NameOrErr = I->getName();
       Check(NameOrErr.getError());
